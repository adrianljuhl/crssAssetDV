namespace crssAssetDV.Migrations
{
    using System;
    using System.Data.Entity.Migrations;
    
    public partial class InitialModel : DbMigration
    {
        public override void Up()
        {
            CreateTable(
                "dbo.CableSelectOptions",
                c => new
                    {
                        Id = c.Decimal(nullable: false, precision: 18, scale: 0, identity: true),
                        Option = c.String(),
                  
                    })
                .PrimaryKey(t => t.Id);
            
            CreateTable(
                "dbo.Devices",
                c => new
                    {
                        Id = c.Decimal(nullable: false, precision: 18, scale: 0, identity: true),
                        Brand = c.String(),
                        Model = c.String(),
                        TypeOfDeviceId = c.Decimal(nullable: false, precision: 18, scale: 0),
                        Description = c.String(),
                        Edquip = c.String(),
                        Serial = c.String(),
                        RoleDeviceId = c.Decimal(nullable: true, precision: 18, scale: 0),
                        BuildingLocation = c.String(),
                        HasPowerSupplyRefId = c.Decimal(nullable: true, precision: 18, scale: 0),
                        HasPowerCableRefId = c.Decimal(nullable: true, precision: 18, scale: 0),
                        HasCoverRefId = c.Decimal(nullable: true, precision: 18, scale: 0),
                        Accessories = c.String(),
                        DamagedRefId = c.Decimal(nullable: true, precision: 18, scale: 0),
                        DeviceNotes = c.String(),
                        WriteOff = c.Boolean(nullable: true),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("dbo.CableSelectOptions", t => t.HasPowerCableRefId, cascadeDelete: true)
                .ForeignKey("dbo.CoverSelectOptions", t => t.HasCoverRefId, cascadeDelete: true)
                .ForeignKey("dbo.DamagedSelectOptions", t => t.DamagedRefId, cascadeDelete: true)
                .ForeignKey("dbo.PowerSupplySelectOptions", t => t.HasPowerSupplyRefId, cascadeDelete: true)
                .ForeignKey("dbo.RoleDevices", t => t.RoleDeviceId, cascadeDelete: true)
                .ForeignKey("dbo.TypeOfDevices", t => t.TypeOfDeviceId, cascadeDelete: true)
                .Index(t => t.TypeOfDeviceId)
                .Index(t => t.RoleDeviceId)
                .Index(t => t.HasPowerSupplyRefId)
                .Index(t => t.HasPowerCableRefId)
                .Index(t => t.HasCoverRefId)
                .Index(t => t.DamagedRefId);
            
            CreateTable(
                "dbo.CoverSelectOptions",
                c => new
                    {
                        Id = c.Decimal(nullable: false, precision: 18, scale: 0, identity: true),
                        Option = c.String(),
                    })
                .PrimaryKey(t => t.Id);
            
            CreateTable(
                "dbo.DamagedSelectOptions",
                c => new
                    {
                        Id = c.Decimal(nullable: false, precision: 18, scale: 0, identity: true),
                        Option = c.String(),
                    })
                .PrimaryKey(t => t.Id);
            
            CreateTable(
                "dbo.Loans",
                c => new
                    {
                        Id = c.Decimal(nullable: false, precision: 18, scale: 0),
                        PeopleId = c.Decimal(nullable: false, precision: 18, scale: 0),
                        DevicesId = c.Decimal(nullable: false, precision: 18, scale: 0),
                        ApproversId = c.Decimal(nullable: false, precision: 18, scale: 0),
                        LoanType = c.String(),
                        Location = c.String(),
                        SuppliedPowerBlock = c.String(),
                        SuppliedCable = c.String(),
                        SuppliedCover = c.String(),
                        OampsUpdated = c.String(),
                        IntuneUpdated = c.String(),
                        EdquipSigned = c.String(),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("dbo.Devices", t => t.DevicesId, cascadeDelete: true)
                .Index(t => t.DevicesId);
            
            CreateTable(
                "dbo.PowerSupplySelectOptions",
                c => new
                    {
                        Id = c.Decimal(nullable: false, precision: 18, scale: 0, identity: true),
                        Option = c.String(),
                    })
                .PrimaryKey(t => t.Id);
            
            CreateTable(
                "dbo.RoleDevices",
                c => new
                    {
                        Id = c.Decimal(nullable: false, precision: 18, scale: 0, identity: true),
                        Role = c.String(),
                    })
                .PrimaryKey(t => t.Id);
            
            CreateTable(
                "dbo.TypeOfDevices",
                c => new
                    {
                        Id = c.Decimal(nullable: false, precision: 18, scale: 0, identity: true),
                        Type = c.String(),
                    })
                .PrimaryKey(t => t.Id);
            
            CreateTable(
                "dbo.DevicesViewModels",
                c => new
                    {
                        Id = c.Decimal(nullable: false, precision: 18, scale: 0),
                        Brand = c.String(),
                        Model = c.String(),
                        Description = c.String(),
                        Edquip = c.String(),
                        Serial = c.String(),
                        SpecialisedDevice = c.String(),
                        BuildingLocation = c.String(),
                        HasPowerSupplyRefId = c.String(),
                        HasPowerCableRefId = c.String(),
                        HasCoverRefId = c.String(),
                        Accessories = c.String(),
                        DeviceNotes = c.String(),
                        WriteOff = c.Boolean(nullable: false),
                        TypeOfDevice = c.String(),
                    })
                .PrimaryKey(t => t.Id);
            
            CreateTable(
                "dbo.AspNetRoles",
                c => new
                    {
                        Id = c.String(nullable: false, maxLength: 128),
                        Name = c.String(nullable: false, maxLength: 256),
                    })
                .PrimaryKey(t => t.Id)
                .Index(t => t.Name, unique: true, name: "RoleNameIndex");
            
            CreateTable(
                "dbo.AspNetUserRoles",
                c => new
                    {
                        UserId = c.String(nullable: false, maxLength: 128),
                        RoleId = c.String(nullable: false, maxLength: 128),
                    })
                .PrimaryKey(t => new { t.UserId, t.RoleId })
                .ForeignKey("dbo.AspNetRoles", t => t.RoleId, cascadeDelete: true)
                .ForeignKey("dbo.AspNetUsers", t => t.UserId, cascadeDelete: true)
                .Index(t => t.UserId)
                .Index(t => t.RoleId);
            
            CreateTable(
                "dbo.AspNetUsers",
                c => new
                    {
                        Id = c.String(nullable: false, maxLength: 128),
                        Email = c.String(maxLength: 256),
                        EmailConfirmed = c.Boolean(nullable: false),
                        PasswordHash = c.String(),
                        SecurityStamp = c.String(),
                        PhoneNumber = c.String(),
                        PhoneNumberConfirmed = c.Boolean(nullable: false),
                        TwoFactorEnabled = c.Boolean(nullable: false),
                        LockoutEndDateUtc = c.DateTime(),
                        LockoutEnabled = c.Boolean(nullable: false),
                        AccessFailedCount = c.Int(nullable: false),
                        UserName = c.String(nullable: false, maxLength: 256),
                    })
                .PrimaryKey(t => t.Id)
                .Index(t => t.UserName, unique: true, name: "UserNameIndex");
            
            CreateTable(
                "dbo.AspNetUserClaims",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        UserId = c.String(nullable: false, maxLength: 128),
                        ClaimType = c.String(),
                        ClaimValue = c.String(),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("dbo.AspNetUsers", t => t.UserId, cascadeDelete: true)
                .Index(t => t.UserId);
            
            CreateTable(
                "dbo.AspNetUserLogins",
                c => new
                    {
                        LoginProvider = c.String(nullable: false, maxLength: 128),
                        ProviderKey = c.String(nullable: false, maxLength: 128),
                        UserId = c.String(nullable: false, maxLength: 128),
                    })
                .PrimaryKey(t => new { t.LoginProvider, t.ProviderKey, t.UserId })
                .ForeignKey("dbo.AspNetUsers", t => t.UserId, cascadeDelete: true)
                .Index(t => t.UserId);

            Sql("INSERT INTO CableSelectOption(Option) Values('--Please Select--')");
            Sql("INSERT INTO CableSelectOption(Option) Values('N/A')");
            Sql("INSERT INTO CableSelectOption(Option) Values('No')");
            Sql("INSERT INTO CableSelectOption(Option) Values('Yes')");

            Sql("INSERT INTO PowerSupplySelectOption(Option) Values('--Please Select--')");
            Sql("INSERT INTO PowerSupplySelectOption(Option) Values('N/A')");
            Sql("INSERT INTO PowerSupplySelecttOption(Option) Values('No')");
            Sql("INSERT INTO PowerSupplySelectOption(Option) Values('Yes')");

            Sql("INSERT INTO CoverSelectOption(Option) Values('--Please Select--')");
            Sql("INSERT INTO CoverSelectOption(Option) Values('N/A')");
            Sql("INSERT INTO CoverSelectOption(Option) Values('No')");
            Sql("INSERT INTO CoverSelectOption(Option) Values('Yes')");

            Sql("INSERT INTO DamagedSelectOption(Option) Values('--Please Select--')");
            Sql("INSERT INTO DamagedSelectOption(Option) Values('No')");
            Sql("INSERT INTO DamagedSelectOption(Option) Values('Yes')");

            Sql("INSERT INTO TypeOfDevice(Type) Values('--Please Select--')");
            Sql("INSERT INTO TypeOfDevice(Type) Values('iPad')");
            Sql("INSERT INTO TypeOfDevice(Type) Values('School Laptop')");
            Sql("INSERT INTO TypeOfDevice(Type) Values('CFT Laptop')");

            Sql("INSERT INTO RoleDevice(Role) Values('--Please Select--')");
            Sql("INSERT INTO RoleDevice(Role) Values('iPad')");
            Sql("INSERT INTO RoleDevice(Role) Values('School Laptop')");
            Sql("INSERT INTO RoleDevice(Role) Values('CFT Laptop')");




        }
        
        public override void Down()
        {
            DropForeignKey("dbo.AspNetUserRoles", "UserId", "dbo.AspNetUsers");
            DropForeignKey("dbo.AspNetUserLogins", "UserId", "dbo.AspNetUsers");
            DropForeignKey("dbo.AspNetUserClaims", "UserId", "dbo.AspNetUsers");
            DropForeignKey("dbo.AspNetUserRoles", "RoleId", "dbo.AspNetRoles");
            DropForeignKey("dbo.Devices", "TypeOfDeviceId", "dbo.TypeOfDevices");
            DropForeignKey("dbo.Devices", "RoleDeviceId", "dbo.RoleDevices");
            DropForeignKey("dbo.Devices", "HasPowerSupplyRefId", "dbo.PowerSupplySelectOptions");
            DropForeignKey("dbo.Loans", "DevicesId", "dbo.Devices");
            DropForeignKey("dbo.Devices", "DamagedRefId", "dbo.DamagedSelectOptions");
            DropForeignKey("dbo.Devices", "HasCoverRefId", "dbo.CoverSelectOptions");
            DropForeignKey("dbo.Devices", "HasPowerCableRefId", "dbo.CableSelectOptions");
            DropIndex("dbo.AspNetUserLogins", new[] { "UserId" });
            DropIndex("dbo.AspNetUserClaims", new[] { "UserId" });
            DropIndex("dbo.AspNetUsers", "UserNameIndex");
            DropIndex("dbo.AspNetUserRoles", new[] { "RoleId" });
            DropIndex("dbo.AspNetUserRoles", new[] { "UserId" });
            DropIndex("dbo.AspNetRoles", "RoleNameIndex");
            DropIndex("dbo.Loans", new[] { "DevicesId" });
            DropIndex("dbo.Devices", new[] { "DamagedRefId" });
            DropIndex("dbo.Devices", new[] { "HasCoverRefId" });
            DropIndex("dbo.Devices", new[] { "HasPowerCableRefId" });
            DropIndex("dbo.Devices", new[] { "HasPowerSupplyRefId" });
            DropIndex("dbo.Devices", new[] { "RoleDeviceId" });
            DropIndex("dbo.Devices", new[] { "TypeOfDeviceId" });
            DropTable("dbo.AspNetUserLogins");
            DropTable("dbo.AspNetUserClaims");
            DropTable("dbo.AspNetUsers");
            DropTable("dbo.AspNetUserRoles");
            DropTable("dbo.AspNetRoles");
            DropTable("dbo.DevicesViewModels");
            DropTable("dbo.TypeOfDevices");
            DropTable("dbo.RoleDevices");
            DropTable("dbo.PowerSupplySelectOptions");
            DropTable("dbo.Loans");
            DropTable("dbo.DamagedSelectOptions");
            DropTable("dbo.CoverSelectOptions");
            DropTable("dbo.Devices");
            DropTable("dbo.CableSelectOptions");
        }
    }
}
