@model IEnumerable<crssAssetDV.Models.Device>

@{
    ViewBag.Title = "Devices";
    Layout = "~/Views/Shared/_Layout.cshtml";
}


<h1>Devices</h1>

<h3>Click to drag columns headers. <br> Drag a column to the first column to update graph with new data.</h3>
<p>
    @Html.ActionLink("Create New Device", "New") |
    @Html.ActionLink("Import Device", "Import")
</p>



    <table id="devices" class="table table-striped table-bordered dt-responsive nowrap" style="width:100%">
        <thead>

            <tr>
                <th>Type</th>
                <th>Edquip</th>
                <th>Serial</th>
                <th>Brand</th>
                <th>Model</th>
                <th>AppleModelID</th>
                <th>Capacity</th>
                <th>Role</th>
                <th>Location</th>
                <th>Status</th>
                <th>Special Note</th>
                <th>Warranty To</th>
                <th>Purchase Date</th>
                <th>Last Asset Check</th>
                <th>Write Off</th>
                <th>Write Off Date</th>
                <th>Delete</th>
            </tr>
        </thead>
        <tbody></tbody>
    </table>

@section scripts

    {

    <script>
        $(document).ready(function () {
            moment.updateLocale(moment.locale(), { invalidDate: '' });

            //$('#devices thead th').each(function () {
            //    var title = $('#devices tfoot th').eq($(this).index()).text();
            //    $(this).html('&amp;lt;input type=&amp;quot;text&amp;quot; placeholder=&amp;quot;Search ' + title + '&amp;quot; /&amp;gt;');

            //});


            var table = $("#devices").DataTable({




                dom: 'PBlfrtip',
                autoFill: false,
                responsive: true,
                fixedHeader: true,
                colReorder: true,

                "columnDefs": [
                    {
                        "targets": [0],
                        "visible": true,
                        "searchable": true
                    },
                    {
                        "targets": [1],
                        "visible": true,
                        "searchable": true
                    },
                    {
                        "targets": [2],
                        "visible": true,
                        "searchable": true
                    },
                    {
                        "targets": [3],
                        "visible": false,
                        "searchable": true
                    },
                    {
                        "targets": [4],
                        "visible": true,
                        "searchable": true
                    },
                    {
                        "targets": [5],
                        "visible": true,
                        "searchable": true
                    },
                    {
                        "targets": [6],
                        "visible": true,
                        "searchable": false
                    },
                    {
                        "targets": [7],
                        "visible": false,
                        "searchable": true
                    },
                    {
                        "targets": [8],
                        "visible": false,
                        "searchable": true
                    },
                    {
                        "targets": [9],
                        "visible": true,
                        "searchable": true
                    },
                    {
                        "targets": [10],
                        "visible": false,
                        "searchable": true
                    },
                    {
                        "targets": [11],
                        "visible": false,
                        "searchable": true
                    },
                    {
                        "targets": [12],
                        "visible": false,
                        "searchable": true
                    },
                    {
                        "targets": [13],
                        "visible": true,
                        "searchable": true
                    },
                    {
                        "targets": [14],
                        "visible": false,
                        "searchable": true
                    },
                    {
                        "targets": [15],
                        "visible": false,
                        "searchable": true
                    },
                    {
                        "targets": [16],
                        "visible": false,
                        "searchable": false
                    },

                    //// Apply the search
                    //table.columns().eq(0).each(function (colIdx) {
                    //    $('input', table.column(colIdx).header()).on('keyup change', function () {
                    //        table
                    //            .column(colIdx)
                    //            .search(this.value)
                    //            .draw();
                    //    });
                    //}),
                ],

                ajax: {
                    url: "/api/devices",
                    dataSrc: ""

                },


                buttons: [

                    {
                        extend: 'copyHtml5',
                        exportOptions: {
                            columns: [0, ':visible']
                        }
                    },
                    {
                        extend: 'excelHtml5',
                        exportOptions: {
                            columns: [0, ':visible']
                        }
                    },
                    {
                        extend: 'csvHtml5',
                        exportOptions: {
                            columns: [0, ':visible']
                        }
                    },

                    {
                        extend: 'print',
                        exportOptions: {
                            columns: [0, ':visible']
                        }
                    },
                    'colvis'
                ],



                columns: [

                    {
                        data: "typeOfDevice.type"
                    },


                    {
                        data: "edquip",
                        render: function (data, type, device) {
                            return "<a href='/devices/edit/" + device.id + "'>" + device.edquip + "</a>";
                        }
                    },
                    {
                        data: "serial",
                        render: function (data, type, device) {
                            return "<a href='/devices/edit/" + device.id + "'>" + device.serial + "</a>";
                        }
                    },
                    {
                        data: "brand",
                        render: function (data, type, device) {
                            return "<a href='/devices/edit/" + device.id + "'>" + device.brand + "</a>";
                        }
                    },
                    {
                        data: "model",
                        render: function (data, type, device) {
                            return "<a href='/devices/edit/" + device.id + "'>" + device.model + "</a>";
                        }
                    },
                    {
                        data: "appleModelRef",
                        render: function (data, type, device) {
                            return "<a href='/devices/edit/" + device.id + "'>" + device.appleModelRef + "</a>";
                        }
                    },
                    {
                        data: "capacity",
                        render: function (data, type, device) {
                            return "<a href='/devices/edit/" + device.id + "'>" + device.capacity + "</a>";
                        }
                    },
                    {
                        data: "roleDevice.role"
                    },

                    {
                        data: "buildingLocation",

                        "render": function (data, type, device) {

                            if (data == null)

                                return ('');

                            else

                                return "<a href='/devices/edit/" + device.id + "'>" + device.buildingLocation + "</a>";
                        }
                    },

                    {
                        data: "damagedSelectOption.option"
                    },
                    {
                        data: "Notes",
                        render: function (data, type, device) {
                            return "<a href='/devices/edit/" + device.id + "'>" + device.accessories + "</a>";
                        }
                    },

                    {
                        data: "warrantyTo",
                        "render": function (data, type, full) {

                            if (type == 'display')

                                return moment(data).format('dddd MMM do yyyy');

                            else

                                return moment(data).format('yyyy/MM/dd HH:mm:ss');

                        }
                    },
                    {
                        data: "purchaseDate",
                        "render": function (data, type, full) {

                            if (type == 'display')

                                return moment(data).format('dddd MMM do yyyy');

                            else

                                return moment(data).format('yyyy/MM/dd HH:mm:ss');

                        }
                    },
                    {
                        data: "assetChecked",
                        "render": function (data, type, full) {

                            if (type == 'display')

                                return moment(data).format('dddd MMM do yyyy');

                            else

                                return moment(data).format('yyyy/MM/dd HH:mm:ss');

                        }
                    },
                    {
                        data: "writeOff",
                        render: function (data, type, device) {
                            if (data == false)
                                return ('No');

                            else if (data == false)
                                return ('Yes');

                            else (data == null)
                            return ('No')

                        }
                    },
                    {
                        data: "writeOffDate",
                        "render": function (data, type, full) {

                            if (type == 'display')

                                return moment(data).format('dddd MMM do yyyy');

                            else

                                return moment(data).format('yyyy/MM/dd HH:mm:ss');

                        }
                    },
                    {
                        data: "id",
                        render: function (data) {
                            return "<button class='btn-link js-delete' data-device-id=" + data + ">Delete</button>";
                        }
                    },
                ]

            });


            $("#devices").on("click", ".js-delete", function () {
                var button = $(this);

                bootbox.confirm("Are you sure you want to delete this device?", function (result) {
                    if (result) {
                        $.ajax({
                            url: "/api/devices/" + button.attr("data-device-id"),
                            method: "DELETE",
                            success: function () {
                                table.row(button.parents("tr")).remove().draw();
                            }
                        });
                    }
                });
            });

            // Create the chart with initial data
            var container = $('<div/>').insertBefore(table.table().container());

            var chart = Highcharts.chart(container[0], {
                chart: {
                    type: 'pie',
                },
                title: {
                    text: '',
                },
                series: [
                    {
                        data: chartData(table),
                    },
                ],
            });

            // On each draw, update the data in the chart
            table.on('draw', function () {
                chart.series[0].setData(chartData(table));
            });            
        });

        function chartData(table) {
            var counts = {};

            // Count the number of entries for each position
            table
                .column(0, { search: 'applied' })
                .data()
                .each(function (val) {
                    if (counts[val]) {
                        counts[val] += 1;
                    } else {
                        counts[val] = 1;
                    }
                });

            // And map it to the format highcharts uses
            return $.map(counts, function (val, key) {
                return {
                    name: key,
                    y: val,
                };
            });
        }
        

    </script>

}
